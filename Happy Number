time complexity:
3digit will run the function getNext three times. n digits will run the functin logN times. 
So the whole time complexity will be: O(logn) + O(loglogn) + .....
the O(\log n)O(logn) is the dominating part, and the others are all tiny in comparison 

Space:
O(1)

int getNext(int n) {
	int ret=0;
	while(n != 0) {
		ret += (n%10) * (n%10);
		n = n/10; 
	}
	return ret;
}

bool isHappy(int n){
	int slow = n;
    int fast = getNext(n);
	while(fast != 1 && slow != fast) {
		slow = getNext(slow);
		fast = getNext(getNext(fast));
	}
	return fast == 1;
}
