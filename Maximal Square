Time: O(mn)
Space: O(n)

int getMin(int a, int b, int c) {
	int ret = a;
	if (b < ret) {ret = b;}
	if (c < ret) {ret = c;}
	return ret;
}

int maximalSquare(char** matrix, int matrixSize, int* matrixColSize){
	int *currRow = (int *)malloc(sizeof(int) * matrixColSize[0]);
	int *prevRow = (int *)calloc(matrixColSize[0], sizeof(int));
	int *temp;
	int maxLen = 0;

	for (int row = 0; row < matrixSize; row++) {
		currRow[0] = (int)matrix[row][0] - (int)'0';
        maxLen = currRow[0] > maxLen ? currRow[0] : maxLen;
		for (int col = 1; col < matrixColSize[0]; col++) {
			if (matrix[row][col] == '0') {
				currRow[col] = 0;
			}
			else {
				currRow[col] = getMin(currRow[col-1], prevRow[col], prevRow[col-1]) + 1;
				maxLen = currRow[col] > maxLen ? currRow[col] : maxLen;
			}
		}
		temp = currRow;
		currRow = prevRow;
		prevRow = temp;
	}
    free(currRow); free(prevRow);
	return maxLen * maxLen;
}
