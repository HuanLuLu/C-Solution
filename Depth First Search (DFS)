Some key nodes:
1. the core of the structure is about graph. When adding edge, we are creating new node, and put node to the front of
    the adjList in graph. 
2. Vertecise will be grouped into one of two groups: visited or not visited.
3. DFS will loop all adjList of the the given node, each node we will check if we have visited the vertex yet. If not, 
    recursively call the DFS on the current adjacent node, if yes, skip this adjacent node, and try on the next. 
    
Time complexity of the algorithm: since we need visit all vertices, and all edges, O(V+E)
Space complexity: We need visit all the vertices, so O(v)

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

typedef struct Node_STR {
    int vertex;
    struct Node_STR *next;
}Node;

typedef struct Graph_STR {
    int numVertices;
    int *visited;
    Node **adjList;
}Graph;

Graph *createGraph(int numVertices) {
    Graph *graph = (Graph *)malloc(sizeof(Graph));
    
    graph->numVertices = numVertices;
    graph->visited = (int *)malloc(sizeof(int) * numVertices);
    graph->adjList = (Node **)malloc(sizeof(Node *) * numVertices);
    
    memset(graph->visited, 0, sizeof(int)*numVertices);
    memset(graph->adjList, 0, sizeof(graph->adjList[0])*numVertices);
    return graph;
}

Node *createNode(int vertex) {
    Node *node = (Node *)malloc(sizeof(Node));
    
    node->vertex = vertex;
    node->next = NULL;
    
    return node;
}

void addEdge(Graph *graph, int n1, int n2) {
    //create n1, put n1 at the top of adjacent list of n2
    Node *node1 = createNode(n1);
    node1->next = graph->adjList[n2];
    graph->adjList[n2] = node1;
    
    //create n2, put n2 at the top of adjacent list of n1
    Node *node2 = createNode(n2);
    node2->next = graph->adjList[n1];
    graph->adjList[n1] = node2;
    
    return;
}

void printGraph(Graph *graph) {
    for (int i = 0; i < graph->numVertices; i++) {
        printf("\nVertex %d adjacenct vertices are: \n", i);
        Node *node = graph->adjList[i];
        while(node != NULL) {
            printf("%d ", node->vertex);
            node = node->next;
        }
        printf("\n");
    }
    return;
}

void DFS(Graph *graph, int vertex) {
    printf("%d ", vertex);
    graph->visited[vertex] = 1;
    
    Node *adjacent = graph->adjList[vertex];
    while (adjacent) {
        if (graph->visited[adjacent->vertex] == 0) {
            DFS(graph, adjacent->vertex);
        }
        adjacent = adjacent->next;
    }
    return;
}

bool isConnect(Graph *graph, int src, int des) {
    if (src == des) {return true;}
    graph->visited[src] = 1;
    
    Node *adjacent = graph->adjList[src];
    
    bool ret = false;
    while (adjacent) {
        if (graph->visited[adjacent->vertex] == 0) {
            ret = isConnect(graph, adjacent->vertex, des);
            if(ret == true) {return true;}
        }
        adjacent = adjacent->next;
    }
    return false;
}

int main() {
    int numVertices=4;
    Graph *graph = createGraph(numVertices);
    
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 2, 3);
    
    printGraph(graph);
    
    //DFS(graph, 0);
    
    bool ret = isConnect(graph, 0, 3);
    
    printf("\nvertices connected? %d\n", ret);
    return 0;
}
