time: O(n^2)
space: O(n^2) //return, other than that O(1)

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** generate(int numRows, int* returnSize, int** returnColumnSizes){
	int **ret = (int **)malloc(sizeof(int *)*numRows);
	*returnColumnSizes = (int *)malloc(sizeof(int)*numRows);
	*returnSize = numRows;

	for(int i=0; i<numRows; i++) {
		ret[i] = (int *)malloc(sizeof(int)*(i+1));
		(*returnColumnSizes)[i] = i+1;
	}

	ret[0][0] = 1;
    int i,j;
	for (i= 1; i < numRows; i++) {
		ret[i][0] = 1;
		for(j=1; j<i; j++) {
			ret[i][j] = ret[i-1][j-1]+ret[i-1][j];
		}
		ret[i][j] = 1;
	}

	return ret;
}

=======
space O(rowIndex) //only space for return, nothing else.
time: O(rowIndex*rowIndex)

int* getRow(int rowIndex, int* returnSize){
    rowIndex += 1;
	*returnSize = rowIndex;
	int *ret = (int *)malloc(sizeof(int)*rowIndex);

	ret[0] = 1;
	if (rowIndex == 1) {return ret;}
	ret[1] = 1;

	int prev = ret[0], curr, i;
	for (int level = 3; level <= rowIndex; level++) {
		for (i = 1; i < level-1; i++) {
			curr = ret[i];
			ret[i] = prev + curr;
			prev = curr;
		}
		ret[i] = 1;
	}
	return ret;
}








