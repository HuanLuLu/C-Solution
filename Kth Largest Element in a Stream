https://leetcode.com/explore/learn/card/heap/646/practices/4016/
====================================
Time complexity: 
create: O(nlogk)
insert: O(logk)

Space comlexity: O(k)

====================================

typedef struct {
    int size;
    int capacity;
    int *arr;
} KthLargest;

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b; *b = temp;
    return;
}

void heapNode(int *arr, int size, int i) {
    int left = 2*i+1;
    int right = 2*i+2;
    int small = i;

    if (left < size && arr[left] < arr[small]) {small = left;}
    if (right < size && arr[right] < arr[small]) {small = right;}
    
    if(small == i) {return;}
    swap(&arr[i], &arr[small]);
    heapNode(arr, size, small);
}

void heapify(int *arr, int size) {
    for (int i = size/2 - 1; i >= 0; i--) {
        heapNode(arr, size, i);
    }
    return;
}

void insert(int *arr, int *size, int num){
    arr[(*size)++] = num;
    heapify(arr, *size);
}

void replaceTop(int *arr, int size, int num) {
    arr[0] = num;
    heapify(arr, size);
    return;
}

void insertNum(int *arr, int *size, int capacity, int num) {
    if(*size < capacity) {
        insert(arr, size, num);
    }
    else {
        if (num > arr[0]) {replaceTop(arr, *size, num);}
    }
}

KthLargest* kthLargestCreate(int k, int* nums, int numsSize) {
    KthLargest *kthLarg = (KthLargest *)malloc(sizeof(KthLargest));

    kthLarg->capacity = k;
    kthLarg->arr = (int *)malloc(sizeof(int) * k);
    kthLarg->size = 0;

    for (int i = 0; i < numsSize; i++) {
        insertNum(kthLarg->arr, &kthLarg->size, kthLarg->capacity, nums[i]);
    }
    return kthLarg;
}

int kthLargestAdd(KthLargest* obj, int val) {
    insertNum(obj->arr, &obj->size, obj->capacity, val);
    return obj->arr[0];
}

void kthLargestFree(KthLargest* obj) {
    free(obj->arr);
    free(obj);
}

/**
 * Your KthLargest struct will be instantiated and called as such:
 * KthLargest* obj = kthLargestCreate(k, nums, numsSize);
 * int param_1 = kthLargestAdd(obj, val);
 
 * kthLargestFree(obj);
*/

