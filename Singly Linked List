Some improvement:
1. modify the single list to save sorted value nodes.
2. add insert and delete function.
3. add Linked List Traversal function.


#include <stdio.h>
#include <stdlib.h>

struct Node {
    int val;
    struct Node *next;
};

void printList(struct Node *head) {
    struct Node *node = head->next;
    while (node != NULL) {
        printf("Node value is %d \n", node->val);
        node = node->next;
    }
}

void insertNode(struct Node *head, struct Node *node) {
    struct Node *prevnode = head;
    struct Node *currnode = head->next;
    
    while (currnode != NULL) {
        if (currnode->val > node->val) {
            prevnode->next = node;
            node->next = currnode;
            return;
        }
        currnode = currnode->next;
        prevnode = prevnode->next;
    }
    prevnode->next = node;
    node->next = currnode;
    return;
}

struct Node * searchNode(struct Node *head, int val, struct Node **prevNode) {
    struct Node *node = head->next;
    if (prevNode != NULL) {*prevNode = head;}
    while(node != NULL) {
        if (node->val == val) {
            return node;
        }
        node = node->next;
        if (prevNode != NULL) {*prevNode = (*prevNode)->next;}
    }
    return NULL;
}

void deleteNode(struct Node *head, int val) {
    struct Node *prev = NULL;
    struct Node *node = searchNode(head, val, &prev);
    
    if (node == NULL) {return;}
    
    prev->next = node->next;
    free(node);
    return;
}

int main() {
    struct Node *head;
    struct Node *first;
    struct Node *second;
    struct Node *third;
    struct Node *rslt = NULL;
    
    head = (struct Node *)malloc(sizeof(struct Node));
    first = (struct Node *)malloc(sizeof(struct Node));
    second = (struct Node *)malloc(sizeof(struct Node));
    third = (struct Node *)malloc(sizeof(struct Node));
    
    head->val = -1;
    head->next = NULL;
    
    first->val = 1;
    first->next = NULL;
    
    second->val = 2;
    second->next = NULL;
    
    third->val = 3;
    third->next = NULL;
    
    insertNode(head, first);
    insertNode(head, third);
    insertNode(head, second);
    
    printList(head);
    
    rslt = searchNode(head, 4, NULL);
    printf("search reuslt: %p\n",rslt);
    
    rslt = searchNode(head, 2, NULL);
    printf("search reuslt: %p\n",rslt);
    
    deleteNode(head, 1);
    printList(head);
    
    return 0;
}

Same method of reference, but instead of using first element as head, here we use a dummy node as head node to avid the double pointer.
#include <stdio.h>
#include <stdlib.h>
//for this single list, we will have a head, the first node will be the next of head node.


//insert function:
//push: insert element at the head
//append: insert element at the end
//insert: insert a node behind an exist node

struct Node {
    int val;
    struct Node *next;
};

void printNode(struct Node *head){
    struct Node *node = head;
    while(node != NULL) {
        printf("the node value = %d\n", node->val);
        node = node->next;
    }
    return;
}

void push(struct Node *head, struct Node *node){
    node->next = head->next;
    head->next = node;
    return;
}

void append(struct Node *head, struct Node *node) {
    struct Node *curr = head;
    while(curr->next!= NULL){
        curr = curr->next;
    }
    curr->next = node;
    return;
}

void insert(struct Node *prev, struct Node *node) {
    node->next = prev->next;
    prev->next = node;
    return;
}

//delete node: delete the node with value
void delete(struct Node *head, int val) {
    struct Node *prev = head;
    struct Node *curr = head->next;
    
    while(curr != NULL) {
        if (curr->val == val) {
            prev->next = curr->next;
            free(curr);
        }
        prev = prev->next;
        curr = curr->next;
    }
    return;
}


int main() {
    struct Node *head = (struct Node *)malloc(sizeof(struct Node));
    struct Node *node1 = (struct Node *)malloc(sizeof(struct Node));
    struct Node *node2 = (struct Node *)malloc(sizeof(struct Node));
    struct Node *node3 = (struct Node *)malloc(sizeof(struct Node));
    struct Node *node4 = (struct Node *)malloc(sizeof(struct Node));
    
    head->val = -1;
    head->next = NULL;
    
    node1->val = 1;
    node1->next = NULL;
    
    node2->val = 2;
    node2->next = NULL;
    
    node3->val = 3;
    node3->next = NULL;
    
    node4->val = 4;
    node4->next = NULL;
        
    push(head, node1);//head->node1
    push(head, node2);//head->node2->node1
    append(head, node3);//head->node2->node1->node3
    insert(node1, node4);//head->node2->node1->node4->node3
    
    printNode(head);
    
    delete(head, 4);
    
    delete(head, 2);
    
    delete(head, 3);
    printNode(head);
    return 0;
}

