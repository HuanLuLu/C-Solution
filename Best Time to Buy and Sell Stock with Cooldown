time O(n^2)
space O(n^2)-->can be optimized into 2 row O(n) 

#define MAX_TWO_VAL(a,b) (a > b ? a : b)

int maxThreeVal(int a, int b ,int c) {
	int max = a;
	if (b > max) {max = b;}
	if (c > max) {max = c;}
	return max;
}

int maxProfit(int* prices, int pricesSize){
	int dp[pricesSize][pricesSize];
	for (int i = 0; i < pricesSize; i++) {
		for (int j = 0; j < pricesSize; j++) {
			dp[i][j] = INT_MIN;
		}
	}

	int max = 0;
	for (int i = 1; i < pricesSize; i++) {
		dp[0][i] = MAX_TWO_VAL(prices[i] - prices[0], dp[0][i-1]);
		max = MAX_TWO_VAL(max, dp[0][i]);
	}

	int curr = 0;

	for (int row = 1; row < pricesSize; row++) {
		for (int col = row + 1; col < pricesSize; col++) {
			curr = prices[col] - prices[row];
			if (row - 3 >= 0 && dp[row-3][row-2] > 0) { 
                curr += dp[row-3][row-2]; 
            }
			dp[row][col] = maxThreeVal(dp[row][col-1], dp[row-1][col], curr);
			max = MAX_TWO_VAL(max, dp[row][col]);
		}
	}
	return max;
}

===========
Method 2: DP + State Machine
State: Hold, Sell, Buy. The way of using the state is to block the invaild state transition. In this case, hold state is necasseray. It will
block the sell state trans directly into buy state.

sell -> hold
hold -> hold

hold -> buy
buy -> hold

buy -> sell
sell -> sell

O(n)
O(1)

#define MAX(a,b) ( a > b ? a : b )

int maxProfit(int* prices, int pricesSize){
	int buy = -prices[0], sell = INT_MIN, hold = 0;
	int tempbuy, tempsell, temphold;

	for (int i = 1; i < pricesSize; i++) {
		tempbuy = MAX(buy, hold - prices[i]);
		tempsell = MAX(sell, buy + prices[i]); 
		temphold =	MAX(hold, sell);
		buy = tempbuy;
		sell = tempsell;
		hold = temphold;
	}
	return MAX(hold, sell);
}
