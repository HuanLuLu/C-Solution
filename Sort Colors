Sort Algorithm 1:
Selection Sort

void sortColors(int* nums, int numsSize){
	int temp_index, temp;
	for (int i=0; i<numsSize; i++) {
		temp_index = i;
		for (int j=i; j<numsSize; j++) {
			if(nums[j] < nums[temp_index]) {
				temp_index = j;
			}
		}
		temp = nums[i];
		nums[i] = nums[temp_index];
		nums[temp_index] = temp;
	}
}

Sort Algorithm 2:
One pass.
The method is to split the array into three parts. front, middle and rear. using two pointers to store the front and rear. If we sort front and rear
part, then the middle part will be automatically sorted.

void swap(int *nums, int i, int j) {
	int temp = nums[i];
	nums[i] = nums[j];
	nums[j] = temp;
}

void sortColors(int* nums, int numsSize){
	int p0 = -1, p2 = numsSize;
    	int curr = 0;
    
	while(curr < p2) {
		if (nums[curr] == 0) {
			swap(nums, curr++, ++p0);
		}
		else if (nums[curr] == 2) {
			swap(nums, curr, --p2);
		}
        else{
            curr++;
        	}
	}
}
