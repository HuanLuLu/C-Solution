Utilize qsort in <stdlib.h>

Code:


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

typedef struct Map_Struct{
	int num;
	int count;
}Map;

int cmpInt(const void *a, const void *b) {
	return *(int *)a - *(int *)b;
}

int cmpMap(const void *a, const void *b) {
	return ((Map *)b)->count - ((Map *)a)->count;
}

int* topKFrequent(int* nums, int numsSize, int k, int* returnSize){
    qsort(nums, numsSize, sizeof(int), cmpInt);
	
	Map map[numsSize];
	int mapSize = 0;

	map[0].num = nums[0];
	map[0].count = 1;
	mapSize = 1;

	for(int i = 1; i < numsSize; i++) {
		if (nums[i] == map[mapSize - 1].num) {
			map[mapSize - 1].count += 1;
		}
		else {
			mapSize += 1;
			map[mapSize - 1].num = nums[i];
			map[mapSize - 1].count = 1;
		}
	}	

	qsort(map, mapSize, sizeof(Map), cmpMap);

	*returnSize = k;
	int *ret = (int *)malloc(sizeof(int) * k);
	for (int i = 0; i < k; i++) {
		ret[i] = map[i].num;
	}
	return ret;
}
