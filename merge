Standard Merge Sort Algorithm.
Create three pointers: 
r_nums1 point to the right-most element in nums1
r_nums2 point to the right-most element in nums2
end point to the end of nums1(physical end not the last element in nums1)
Go through two arraies backward, so we don't need extra memory

Time complexity: O(m+n)
Space complexity: O(1)


void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n){
	int *r_nums1 = nums1+m-1;
	int *r_nums2 = nums2+n-1;
	int *end = nums1+nums1Size-1;

	while ( (r_nums1 >= nums1) && (r_nums2 >= nums2) ) {
		if (*r_nums1 > *r_nums2) {
			*end = *r_nums1;
			r_nums1--;
		}
		else {
			*end = *r_nums2;
			r_nums2--;
		}
		end--;
	}

	while (r_nums1 >= nums1) {
		*end = *r_nums1;
		r_nums1--;
		end--;
	}

	while (r_nums2 >= nums2) {
		*end = *r_nums2;
		r_nums2--;
		end--;
	}

	return;
}
