https://leetcode.com/explore/learn/card/heap/645/applications-of-heap/4031/
==================================================================================================================================
Two Solutions:
==================================================================================================================================
Solution 1
Method:
1) Create a max heap based on the input array;
2) Store the top of the heap, than delete the top. 
3) keep doing step 2 K times to get the top K

Time complexity:
Create the heap: O(N), each delete will be O(logN), delete k times, will be KLogN. So, total time complexity is O(N+KlogN)
Space: O(N) for the heap

==================================================================================================================================
Solution 2
Method:
Use the min heap. Heap will keep the top k max in min heap instead of max heap in method1. Than when having the new element, if 
the new element is smaller than the top the min heap. It means, new one is smaller than any of the elements in the heap. So, we don't
need to do anything. Otherwise, we store the new element in the top and heapify the array.

Time complexity:
Insert all elements into heap, the size of heap is k, so total is O(NlogK)
Space: O(K)

In the following solution, we are using max heap solution. But since we are saving the negative value of input, we can still implement 
our design.

#include <string.h>
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b; *b = temp;
    return;
}

void heapifyNode(int *arr, int size, int i){
    int large = i;
    int l = 2*i + 1;
    int r = 2*i + 2;

    if (l < size && arr[l] > arr[large]) {large = l;}
    if (r < size && arr[r] > arr[large]) {large = r;}

    if (i == large) {return;}

    swap(&arr[i], &arr[large]);
    heapifyNode(arr, size, large);
    return;
}

void heapify(int *arr, int size){
    for (int i = size/2 - 1; i >= 0; i--) {
        heapifyNode(arr, size, i);
    }
    return;
}

void insert(int *arr, int *size, int num) {
    arr[(*size)++] = num;
    heapify(arr, *size);
}

void delete(int *arr, int *size, int num) {
    int i = 0;
    for(i = 0; i < *size; i++) {
        if (arr[i] == num) {break;}
    }

    swap(&arr[i], &arr[*size-1]);
    heapify(arr, --*size);
    return;
}

void heapSort(int *arr, int size) {
    for (int i = size; i >= 0; i--) {
            heapify(arr++, i);
    }
    return;
}


void printArr(int *arr, int size){
    for(int i = 0; i<size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int *topK(int *arr, int size, int k) {
    int *top = (int *)malloc(sizeof(int) * k);
    int topSize = 0;

    for (int i = 0; i < size; i++) {
        if (i < k) {
            insert(top, &topSize, -arr[i]);
        }
        else if(arr[i] > -top[0]) {
            top[0] = -arr[i];
            heapify(top, topSize);
        }
    }
    for (int i = 0; i < topSize; i++) {
        top[i] = -top[i];
    }
    return top;
}

int main() {
    int size = 6;
    int arr[7] = {100, 90, 40, 70, 80, 30};
    
    int *result = topK(arr, size, 3);
    printArr(result, 3);
}

