Algorithm: Quick sort 
Time complexity: O(nlogn + n)
space complexity O(logn)



/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

int cmp(const void *a, const void *b) {
	return *(int *)a - *(int *)b;
}


int** minimumAbsDifference(int* arr, int arrSize, int* returnSize, int** returnColumnSizes){
	qsort(arr, arrSize, sizeof(int), cmp);

	int min_diff = INT_MAX, count = 0, diff;
	for(int i=1; i<arrSize; i++) {
		diff = abs(arr[i] - arr[i-1]);
		if ( diff < min_diff ) {
			min_diff = diff;
			count = 1;
		}
		else if(diff == min_diff) {
			count += 1;
		}
	}

	*returnSize = 0;
	int **ret = (int **)malloc(sizeof(int *) * count);
	*returnColumnSizes = (int *)malloc(sizeof(int) * count);
	int *temp;

	for(int i=1; i<arrSize; i++) {
		if (abs(arr[i] - arr[i-1]) == min_diff) {
			(*returnColumnSizes)[*returnSize] = 2;
			temp = (int *)malloc(sizeof(int) * 2);
			temp[0] = arr[i-1];
			temp[1] = arr[i];
			ret[*returnSize] = temp;
            *returnSize += 1;
		}
	}
	return ret;
}
