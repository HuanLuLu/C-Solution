For two large array, we could quick sort it first.
Since here, two arrays are relativly small, and the range of element values are also small, so we use extra array to help check if we have
visited the value before.

time complexity O(m+n)
space complexity O(1001)

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){
	int fg[1001] = {0};

	for(int i=0; i<nums1Size; i++) {
		fg[nums1[i]] = 1;
	}
	
	int max_size = nums1Size > nums2Size ? nums1Size : nums2Size;
	int *ret = (int *)malloc(sizeof(int)*max_size);
	*returnSize = 0;

	for(int i=0; i<nums2Size; i++) {
		if (fg[nums2[i]] == 1) {
			ret[(*returnSize)++] = nums2[i];
			fg[nums2[i]] = -1;
		}
	}
	return ret;
}
