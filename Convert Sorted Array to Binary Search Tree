/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


struct TreeNode* createNode(int val){
	struct TreeNode *node = (struct TreeNode *)malloc(sizeof(struct TreeNode));
	node->val = val;
	node->left = NULL;
	node->right = NULL; 
	return node;
}

struct TreeNode* sortedArrayToBST(int* nums, int numsSize){
	if (numsSize <= 0) {return NULL;}

	int mid = numsSize/2;
	struct TreeNode *root = createNode(nums[mid]);

	root->left = sortedArrayToBST(&nums[0], mid);
	root->right = sortedArrayToBST(&nums[mid+1], numsSize-mid-1);
	return root;
}

time complexity: O(n), we need to create every node.
space complexity: O(logN), for the recursion stack.
