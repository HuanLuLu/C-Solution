Method 1:
10== 1010 is 1000 + 1
so base case is 0
iterarion: ret[x] = ret[x & (x-1)] + 1;

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* countBits(int n, int* returnSize){
	int *ret = (int *)malloc(sizeof(int) * (n+1));
	*returnSize = 0;

	ret[(*returnSize)++] = 0;
	if (n+1 == *returnSize) {return ret;}

	for(int x = 1; x <= n; x++) {
        ret[x] = ret[x & (x-1)] + 1;
        (*returnSize)++;
    }
	return ret;
}

Method 2:
0 1
0 1 1 2
0 1 1 2 1 2 2 3
....

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* countBits(int n, int* returnSize){
	int *ret = (int *)malloc(sizeof(int) * (n+1));
	*returnSize = 0;

	ret[(*returnSize)++] = 0;
	if (n+1 == *returnSize) {return ret;}

	ret[(*returnSize)++] = 1;
	if (n+1 == *returnSize) {return ret;}

	int p = 2;
	while(*returnSize < n + 1) {
		for (int i=0; i<p; i++) {
			ret[(*returnSize)++] = 1 + ret[i];
			if (n + 1 == *returnSize) {return ret;}
		}
		p *= 2;
	}
	return ret;
}
