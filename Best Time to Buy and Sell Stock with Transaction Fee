DP
Complexity: O(n^2)
O(N)
#define MAX_TWO_VAL(a,b) ( a > b ? a : b )

int maxProfit(int* prices, int pricesSize, int fee){
	int *curr = (int *)malloc(sizeof(int) * pricesSize);
	int *prev = (int *)malloc(sizeof(int) * pricesSize);

	prev[0] = 0;
	for (int i = 1; i < pricesSize; i++) {
		prev[i] = MAX_TWO_VAL(prev[i-1], prices[i] - prices[0] - fee);
	}

	int *temp;
	int currProfit;
	for (int i = 1; i < pricesSize; i++) {
		curr[i] = prev[i];
		for (int j = i + 1; j < pricesSize; j++) {
			currProfit = prices[j] - prices[i] - fee;
			currProfit += prev[i-1];
			curr[j] = MAX_TWO_VAL(currProfit, curr[j-1]);
			curr[j] = MAX_TWO_VAL(curr[j], prev[j]);
		}
		temp = curr;
		curr = prev;
		prev = temp;
	}
	int ret = prev[pricesSize - 1];
	free(prev); free(curr);
	return ret;
}

=========
DP+StateMachine
Three states: buy, sell, hold. Our algorithm is to set the statmachine, the current state only depends on the max of the previous one. 
At the end, we will pick up the max(0, sell). 

buy-->sell
buy-->hold-->sell

sell-->buy
sell->hold-->buy

buy/sell/hold-->hold

We can see, in our case, hold state is not necessary. Since at current hold, we will take the previous maximum value among sell, buy and previous hold, 
which is also max of futher previous buy and sell. Without hold, we still will pass the previous maximum sell and buy to current state.

Initial state: buy: -prices, sell: since we not sell anything, the profit we made was still 0 (hold the current state.)

#define MAX(a,b) ( a > b ? a : b )

int maxProfit(int* prices, int pricesSize, int fee){
	int buy = -prices[0], sell = -50001;
	int tempbuy, tempsell;

	for (int i = 1; i < pricesSize; i++) {
		tempbuy = MAX(buy, sell - prices[i]);
		tempsell = MAX(buy + prices[i] - fee, sell);
		buy = tempbuy;
		sell = tempsell;
	}
	return MAX(sell, 0);
}




