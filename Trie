Reference: 
https://www.geeksforgeeks.org/trie-insert-and-search/

#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>

#define MAX_NUM 26

#define ARRAY_SIZE(a) ( sizeof(a) / sizeof(a[0]) )
#define CHAR_TO_INDEX(c) ( (int)c - (int)'a' )

typedef struct Trie_Node {
    struct Trie_Node *children[MAX_NUM];
    bool isEndofWord;
}TrieNode;

TrieNode *createTrieNode(void) {
    TrieNode *pNode = NULL;
    
    pNode = (TrieNode *)malloc(sizeof(TrieNode));
    pNode->isEndofWord = false;
    for(int i=0; i<MAX_NUM; i++ ) {
        pNode->children[i] = NULL;
    }
    return pNode;
}

void insert(TrieNode *root, char *string) {
    int index = 0;
    for (int i = 0; i < strlen(string); i++) {
        index = CHAR_TO_INDEX(string[i]);
        if ( !root->children[index] ) { root->children[index] = createTrieNode(); }
        root = root->children[index];
    }
    root->isEndofWord = true;
}

bool search(TrieNode *root, char *string) {
    int index;
    for(int i = 0; i < strlen(string); i++) {
        index = CHAR_TO_INDEX(string[i]);
        if (!root->children[index]) {return false;}
        root = root->children[index];
    }
    return root->isEndofWord;
}

int main(void) {
    // Input keys (use only 'a' through 'z' and lower case)
    char keys[][8] = {"the", "a", "there", "answer", "any",
                     "by", "bye", "their"};
  
    char output[][32] = {"Not present in trie", "Present in trie"};
  
  
    TrieNode *root = createTrieNode();
  
    // Construct trie
    int i;
    for (i = 0; i < ARRAY_SIZE(keys); i++)
        insert(root, keys[i]);
  
    // Search for different keys
    printf("%s --- %s\n", "the", output[search(root, "the")] );
    printf("%s --- %s\n", "these", output[search(root, "these")] );
    printf("%s --- %s\n", "their", output[search(root, "their")] );
    printf("%s --- %s\n", "thaw", output[search(root, "thaw")] );
  
    return 0;
}
