Notice:
1. Queue, cycle queue, need to remember to change front and rear properlly
2. When to use the visited:
    two places to use the visited fg: a) After dequeue, the node may have been visited. we can skip scan his adjancent nodes.
                                      b) Like DFS, when we go through the adjancent list, the visited one should not be enqueued.
                                      
 Time complexity: O(E+V)
 Space Complexity: O(V)


#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>

typedef struct Node_STR{
    int vertex;
    struct Node_STR *next;
}Node;

typedef struct Graph_STR {
    int vertexNum;
    int *visited;
    Node **adjList;
}Graph;

typedef struct Queue_STR{
    int arr[100];
    int front;
    int rear;
    int capacity;
}Queue;

Queue *createQueue(int capacity) {
    Queue *queue = (Queue *)malloc(sizeof(Queue));
    queue->capacity = capacity;
    queue->front = 0;
    queue->rear = capacity-1;
    return queue;
}

bool isQueueEmplty(Queue *queue) {
    return queue->front == (queue->rear+1)%queue->capacity;
}

void enqueue(int vertex, Queue *queue) {
    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->arr[queue->rear] = vertex;
    return;
}

int dequeue(Queue *queue) {
    int ret = queue->arr[queue->front];
    queue->front = (queue->front) + 1 % queue->capacity;
    return ret;
}

Graph *createGraph(int vertexNum) {
    Graph *graph = (Graph *)malloc(sizeof(Graph));
    
    graph->vertexNum = vertexNum;
    graph->visited = (int *)malloc(sizeof(int)*vertexNum);
    graph->adjList = (Node **)malloc(sizeof(Node *)*vertexNum);
    return graph;
}

Node *createNode(int vertex) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->vertex = vertex;
    node->next = NULL;
    return node;
}

void addEdge(Graph *graph, int v1, int v2) {
    Node *node1 = createNode(v1);
    node1->next = graph->adjList[v2];
    graph->adjList[v2] = node1;
    
    Node *node2 = createNode(v2);
    node2->next = graph->adjList[v1];
    graph->adjList[v1] = node2;
    
    return;
}

void BFS(Graph *graph, int src) {
    Queue *queue = createQueue(100);
    enqueue(src, queue);
    
    printf("BFS sequence: \n");
    
    while (!isQueueEmplty(queue)) {
        int vertex = dequeue(queue);
        if (graph->visited[vertex] == 0) {
            printf("%d ", vertex);
            graph->visited[vertex] = 1;
            Node *node = graph->adjList[vertex];
            while(node) {
                if (graph->visited[node->vertex] == 0) {
                    enqueue(node->vertex, queue);
                }
                node = node->next;
            }
        }
        
    }
    return;
}

void printGraph(Graph* graph) {
  int v;
  for (v = 0; v < graph->vertexNum; v++) {
    Node *temp = graph->adjList[v];
    printf("\n Adjacency list of vertex %d\n ", v);
    while (temp) {
      printf("%d -> ", temp->vertex);
      temp = temp->next;
    }
    printf("\n");
  }
}


int main() {
    Graph* graph = createGraph(6);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 4);
    addEdge(graph, 1, 3);
    addEdge(graph, 2, 4);
    addEdge(graph, 3, 4);
    
    printGraph(graph);
    
    BFS(graph, 0);
    return 0;
}
