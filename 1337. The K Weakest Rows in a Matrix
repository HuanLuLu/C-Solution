Approach 1: linear sort
Time complexity: calculating sums: O(m*n); sort: O(mlogm). Total time comlexity: O(m*(n+logm))
Space: O(m)

Code:

typedef struct {
	int row;
	int val;
}Strength;

int cmp(const void *a, const void *b) {
	if ( ((Strength *)a)->val ==  ((Strength *)b)->val ) {
		return ((Strength *)a)->row -  ((Strength *)b)->row;
	}
	else {
		return ((Strength *)a)->val -  ((Strength *)b)->val;
	}
}

int* kWeakestRows(int** mat, int matSize, int* matColSize, int k, int* returnSize){
	int rows = matSize;
	int cols = matColSize[0];

	Strength strength[rows];
	int sum;
	for(int i = 0; i < rows; i ++){
		sum = 0;
		for (int j = 0; j < cols; j++) {
			sum += mat[i][j];
		}
		strength[i].row = i;
		strength[i].val = sum;
	}

	qsort(&strength, rows, sizeof(Strength), cmp);
	
	int *ret = (int *)malloc(sizeof(int) * k);
	for(int i = 0; i < k; i++) {
		ret[i] = strength[i].row;
	}
	*returnSize = k;
	return ret;
}
==================================================
Approach 2:
Check cols instead of rows. First 0 will be the weakest.
Time complexity: The worst case is we have to go through the whole matrix to fill the return array. So it will be O(m*n)
Space complexity: O(1)

int* kWeakestRows(int** mat, int matSize, int* matColSize, int k, int* returnSize){
	int rows = matSize;
	int cols = matColSize[0];

	int *ret = (int *)malloc(sizeof(int) * k);
	*returnSize =k;
	int fg[rows];
	memset(fg, 0, sizeof(int)*rows);

	int index = 0;
	for (int c = 0; c < cols; c++) {
		for (int r = 0; r < rows; r++) {
			if (mat[r][c] == 0 && fg[r] == 0) {
				fg[r] = 1;
				ret[index++] = r;
				if(index >= k) {return ret;}
			}		
		}
	}
	for (int i = 0; i < rows; i++) {
		if(fg[i] == 0) {
			ret[index++] = i;
			if(index >= k) {return ret;}
		}
	}
	return ret;
}

