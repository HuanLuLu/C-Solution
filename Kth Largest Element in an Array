int cmp(const void *a, const void *b) {
    return *(int *)b - *(int *)a;
}

int findKthLargest(int* nums, int numsSize, int k) {
    qsort(nums, numsSize, sizeof(int), cmp);
    return nums[k-1];
}


==========
Quick Sort
Reference: https://www.geeksforgeeks.org/quickselect-algorithm/
The algorithm is similar to quick sort. But instead of sorting both sides, in quick sort, we only need to do one side based on the pivot loction


void swap(int *arr, int i, int j) {
	int temp = arr[i];
	arr[i] = arr[j];
	arr[j] = temp;
}

int partition(int *arr, int start, int end) {
	int pivot = arr[end];
	int pi_loc = start;

	for (int i = start; i < end; i++) {
		if (arr[i] < pivot) {
			swap(arr, i, pi_loc++);
		}
	}
	swap(arr, pi_loc, end);
	return pi_loc;
}

int quickSelect(int *arr, int start, int end, int k) {
	if (start > end) {return INT_MAX;}

	int pi_loc = partition(arr, start, end); 

	if (pi_loc == k-1) {
		return arr[pi_loc];
	}
	else if (pi_loc > k-1) {
		return quickSelect(arr, start, pi_loc-1, k);
	}
	else {
		return quickSelect(arr, pi_loc+1, end, k);
	}
}

int findKthLargest(int* nums, int numsSize, int k) {
    return quickSelect(nums, 0, numsSize-1, numsSize - k + 1);
}
